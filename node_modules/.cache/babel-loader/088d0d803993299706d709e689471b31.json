{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yalci\\\\OneDrive\\\\Desktop\\\\REPO\\\\movie\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { auth } from \"../auth/firebase\";\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { GoogleAuthProvider, createUserWithEmailAndPassword, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, signOut, updateProfile } from \"firebase/auth\";\nimport { toastErrorNotifY, toastSuccessNotifY, toastWarnNotifY } from \"../helpers/ToastNotify\";\nimport { useNavigate } from \"react-router-dom\"; //!context alanı\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContextt = /*#__PURE__*/createContext(); //!component\n\nconst AuthContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  const [currentUser, setCurrentUser] = useState();\n  useEffect(() => {\n    userTakip();\n  }, []); //!register\n\n  const createUser = async (email, password, displayName) => {\n    try {\n      await createUserWithEmailAndPassword(auth, email, password);\n      toastSuccessNotifY(\"Registered Successfully\");\n      navigate(\"/\"); //? USERTAKİPTEN SONRA -----kullanıcı profilini güncellemek için kullanılan firebase metodu, login logout da userTakip sayesinde güncelleniyor ama register da isim güncellemesi yok, o da bu şekilde oluyor.alttakini yazmazsam (register ile girdiğimde) navbarda displayName i göremem\n\n      await updateProfile(auth.currentUser, {\n        displayName: displayName\n      });\n    } catch (error) {\n      console.log(error);\n      toastErrorNotifY(error.message);\n    }\n  }; //!login\n\n\n  const signIn = async (email, password) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      toastSuccessNotifY(\"Logged in successfully\");\n      navigate(\"/\");\n    } catch (error) {\n      toastErrorNotifY(error.message);\n    }\n  }; //! google ile giriş\n  //* https://console.firebase.google.com/\n  //* => Authentication => sign-in-method => enable Google\n  //! Google ile girişi enable yap\n  //* => Authentication => settings => Authorized domains => add domain\n  //! Projeyi deploy ettikten sonra google sign-in çalışması için domain listesine deploy linkini ekle\n\n\n  const signUpGoogle = () => {\n    //?google hesaplarıma ulaşmak için firebase metodu\n    const provider = new GoogleAuthProvider(); //?açılır pencere ile giriş yapılması için firebase metodu\n\n    signInWithPopup(auth, provider).then(result => {\n      toastSuccessNotifY(\"Logged in successfully\");\n      navigate(\"/\");\n    }).catch(error => {\n      console.log(error);\n    });\n  }; //? Kullanıcının signin olup olmadığını takip eden ve kullanıcı değiştiğinde yeni kullanıcıyı response olarak dönen firebase metodu. bir kere çalıştır login logout takip eder\n\n\n  const userTakip = () => {\n    onAuthStateChanged(auth, user => {\n      console.log(user);\n\n      if (user) {\n        const {\n          email,\n          displayName,\n          photoURL\n        } = user;\n        setCurrentUser({\n          email,\n          displayName,\n          photoURL\n        });\n      } else {\n        setCurrentUser(false);\n      }\n    });\n  }; //!siteden çıkış\n\n\n  const cikis = () => {\n    signOut(auth);\n    toastSuccessNotifY(\"logout is successfully\");\n  };\n\n  const forgotPassword = email => {\n    //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\n    sendPasswordResetEmail(auth, email).then(() => {\n      // Password reset email sent!\n      toastWarnNotifY(\"Please check your mail box!\"); // alert(\"Please check your mail box!\");\n    }).catch(err => {\n      toastErrorNotifY(err.message); // alert(err.message);\n      // ..\n    });\n  };\n\n  const values = {\n    createUser,\n    signIn,\n    signUpGoogle,\n    currentUser,\n    cikis,\n    forgotPassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContextt.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"bKZSRq051PIlcMo2p2RmBqD81vA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/yalci/OneDrive/Desktop/REPO/movie/src/context/AuthContext.js"],"names":["auth","React","createContext","useEffect","useState","GoogleAuthProvider","createUserWithEmailAndPassword","onAuthStateChanged","sendPasswordResetEmail","signInWithEmailAndPassword","signInWithPopup","signOut","updateProfile","toastErrorNotifY","toastSuccessNotifY","toastWarnNotifY","useNavigate","AuthContextt","AuthContextProvider","children","navigate","currentUser","setCurrentUser","userTakip","createUser","email","password","displayName","error","console","log","message","signIn","signUpGoogle","provider","then","result","catch","user","photoURL","cikis","forgotPassword","err","values"],"mappings":"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","sourcesContent":["import { auth } from \"../auth/firebase\";\r\nimport React, { createContext, useEffect, useState } from \"react\";\r\nimport {\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  sendPasswordResetEmail,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n  signOut,\r\n  updateProfile,\r\n} from \"firebase/auth\";\r\nimport {\r\n  toastErrorNotifY,\r\n  toastSuccessNotifY,\r\n  toastWarnNotifY,\r\n} from \"../helpers/ToastNotify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//!context alanı\r\nexport const AuthContextt = createContext();\r\n\r\n//!component\r\nconst AuthContextProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [currentUser, setCurrentUser] = useState();\r\n\r\n  useEffect(() => {\r\n    userTakip();\r\n  }, []);\r\n\r\n  //!register\r\n  const createUser = async (email, password, displayName) => {\r\n    try {\r\n      await createUserWithEmailAndPassword(auth, email, password);\r\n      toastSuccessNotifY(\"Registered Successfully\");\r\n      navigate(\"/\");\r\n\r\n      //? USERTAKİPTEN SONRA -----kullanıcı profilini güncellemek için kullanılan firebase metodu, login logout da userTakip sayesinde güncelleniyor ama register da isim güncellemesi yok, o da bu şekilde oluyor.alttakini yazmazsam (register ile girdiğimde) navbarda displayName i göremem\r\n      await updateProfile(auth.currentUser, {\r\n        displayName: displayName,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toastErrorNotifY(error.message);\r\n    }\r\n  };\r\n\r\n  //!login\r\n\r\n  const signIn = async (email, password) => {\r\n    try {\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      toastSuccessNotifY(\"Logged in successfully\");\r\n      navigate(\"/\");\r\n    } catch (error) {\r\n      toastErrorNotifY(error.message);\r\n    }\r\n  };\r\n\r\n  //! google ile giriş\r\n  //* https://console.firebase.google.com/\r\n  //* => Authentication => sign-in-method => enable Google\r\n  //! Google ile girişi enable yap\r\n  //* => Authentication => settings => Authorized domains => add domain\r\n  //! Projeyi deploy ettikten sonra google sign-in çalışması için domain listesine deploy linkini ekle\r\n\r\n  const signUpGoogle = () => {\r\n    //?google hesaplarıma ulaşmak için firebase metodu\r\n    const provider = new GoogleAuthProvider();\r\n\r\n    //?açılır pencere ile giriş yapılması için firebase metodu\r\n    signInWithPopup(auth, provider)\r\n      .then((result) => {\r\n        toastSuccessNotifY(\"Logged in successfully\");\r\n        navigate(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //? Kullanıcının signin olup olmadığını takip eden ve kullanıcı değiştiğinde yeni kullanıcıyı response olarak dönen firebase metodu. bir kere çalıştır login logout takip eder\r\n  const userTakip = () => {\r\n    onAuthStateChanged(auth, (user) => {\r\n      console.log(user);\r\n      if (user) {\r\n        const { email, displayName, photoURL } = user;\r\n        setCurrentUser({ email, displayName, photoURL });\r\n      } else {\r\n        setCurrentUser(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  //!siteden çıkış\r\n\r\n  const cikis = () => {\r\n    signOut(auth);\r\n\r\n    toastSuccessNotifY(\"logout is successfully\");\r\n  };\r\n\r\n  const forgotPassword = (email) => {\r\n    //? Email yoluyla şifre sıfırlama için kullanılan firebase metodu\r\n    sendPasswordResetEmail(auth, email)\r\n      .then(() => {\r\n        // Password reset email sent!\r\n        toastWarnNotifY(\"Please check your mail box!\");\r\n        // alert(\"Please check your mail box!\");\r\n      })\r\n      .catch((err) => {\r\n        toastErrorNotifY(err.message);\r\n        // alert(err.message);\r\n        // ..\r\n      });\r\n  };\r\n\r\n  const values = {\r\n    createUser,\r\n    signIn,\r\n    signUpGoogle,\r\n    currentUser,\r\n    cikis,\r\n    forgotPassword,\r\n  };\r\n\r\n  return (\r\n    <AuthContextt.Provider value={values}>{children}</AuthContextt.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}